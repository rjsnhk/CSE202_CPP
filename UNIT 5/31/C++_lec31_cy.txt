//////////////////////////////////
SACHIN
///////////////////////////////



Shalu is tasked with developing a calendar application that allows users to view the calendar layout for a specific month and year. The application should prompt the user to enter the desired month (1â€“12) and year. The program should then validate the user input to ensure it's within the valid range.



Once the input is validated, the application should calculate the day of the week for the first day of the specified month and display a calendar layout for that month. The calendar should show the days of the month, starting on Monday and ending on Sunday, with proper formatting to align the days correctly.



Additionally, the program should handle leap years correctly by determining the number of days in February based on the input year.



Your task is to implement getDayOfWeek, isLeapYear, getDaysInMonth, and the main function as provided in the given code to fulfill the requirements of the calendar application. Ensure that the calendar layout is generated accurately for the specified month and year and that the days are aligned correctly in the output. Properly manage memory allocation and deallocation for the calendar layout to avoid memory leaks. Test the application with various inputs to verify its correctness and usability.



Note: This kind of question will help in clearing Capgemini recruitment.

Input format :
The input consists of two integers, which represent the month and year in separate lines.

Output format :
If the user enters invalid input (e.g., month out of range, negative year), the program should display an error message indicating that the input is invalid.

If the input is valid, the program will generate a formatted calendar layout for the specified month and year.

The calendar will be displayed with the days of the month arranged in rows and columns, starting from Sunday to Saturday.

The month and year for which the calendar is displayed will be shown in the header.



Refer to the sample output for formatting specifications.

Code constraints :
The month should be an integer in the range of 1 to 12.

The year should be a non-negative integer.

The program assumes that the user will input valid integers for month and year. It does not handle non-integer inputs or inputs with fractional parts.

The code is implemented to work with the Gregorian calendar system, which is the most widely used calendar system in the world. It will not work accurately for dates before the adoption of the Gregorian calendar in 1582.

Sample test cases :
Input 1 :
2
2000
Output 1 :
=========================
    2/2000 Calendar    
=========================
Mon Tue Wed Thu Fri Sat Sun
       1   2   3   4   5   6
   7   8   9  10  11  12  13
  14  15  16  17  18  19  20
  21  22  23  24  25  26  27
  28  29                    
                            
Input 2 :
1
2020
Output 2 :
=========================
    1/2020 Calendar    
=========================
Mon Tue Wed Thu Fri Sat Sun
           1   2   3   4   5
   6   7   8   9  10  11  12
  13  14  15  16  17  18  19
  20  21  22  23  24  25  26
  27  28  29  30  31        
                            
Input 3 :
4
1980
Output 3 :
=========================
    4/1980 Calendar    
=========================
Mon Tue Wed Thu Fri Sat Sun
       1   2   3   4   5   6
   7   8   9  10  11  12  13
  14  15  16  17  18  19  20
  21  22  23  24  25  26  27
  28  29  30                
                            
Input 4 :
10
-600
Output 4 :
Invalid input. Please enter a valid month (1-12) and year.
Input 5 :
13
2000
Output 5 :
Invalid input. Please enter a valid month (1-12) and year.



// You are using GCC
#include <iostream>
#include <iomanip>

int getDayOfWeek(int year, int month, int day) {
    if (month < 3) {
        month += 12;
        year--;
    }
    int century = year / 100;
    year %= 100;
    int dayOfWeek = (day + (13 * (month + 1)) / 5 + year + year / 4 + century / 4 + 5 * century) % 7;
    // Convert dayOfWeek to 0 (Sunday) - 6 (Saturday) range
    return (dayOfWeek + 5) % 7;
}

// Function to check if a year is a leap year
bool isLeapYear(int year) {
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
}

// Function to get the number of days in a month
int getDaysInMonth(int month, int year) {
    static const int daysInMonth[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    return (month == 2 && isLeapYear(year)) ? 29 : daysInMonth[month];
}

int main() {
    int month, year;

    // Get user input for the month and year
    std::cin >> month;
    std::cin >> year;

    // Check if the input is valid
    if (month < 1 || month > 12 || year < 0) {
        std::cout << "Invalid input. Please enter a valid month (1-12) and year." << std::endl;
        return 0;
    }

    // Get the number of days in the specified month
    int daysInMonth = getDaysInMonth(month, year);

    // Calculate the day of the week for the first day of the month
    int startDayOfWeek = getDayOfWeek(year, month, 1);

    // Allocate memory for the calendar layout dynamically
    int** calendar = new int*[6];
    for (int i = 0; i < 6; i++) {
        calendar[i] = new int[7];
    }

    // Initialize the calendar with zeros
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 7; j++) {
            calendar[i][j] = 0;
        }
    }

    // Fill in the calendar with the days of the month
    int currentDay = 1;
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 7; j++) {
            if ((i == 0 && j < startDayOfWeek) || currentDay > daysInMonth) {
                // Skip the days from the previous month or days after the current month
                continue;
            }
            calendar[i][j] = currentDay;
            currentDay++;
        }
    }

    // Print the calendar
    std::cout << "=========================" << std::endl;
    std::cout << "    " << month << "/" << year << " Calendar    " << std::endl;
    std::cout << "=========================" << std::endl;
    std::cout << "Mon Tue Wed Thu Fri Sat Sun" << std::endl;

    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 7; j++) {
            if (calendar[i][j] == 0) {
                std::cout << "    ";
            } else {
                std::cout << std::setw(4) << calendar[i][j];
            }
        }
        std::cout << std::endl;
    }

    // Deallocate memory for the calendar layout
    for (int i = 0; i < 6; i++) {
        delete[] calendar[i];
    }
    delete[] calendar;

    return 0;
}


Problem Statement



Harish is developing a program for a robotics project that involves processing a 2D grid. The program requires rotating a 2D matrix 90 degrees clockwise in place.



He needs to implement the rotateMatrix function to achieve this rotation without using any temporary arrays or data structures, only dynamic memory allocation. Additionally, he needs to provide functions to display the original and rotated matrices. Write a program to accomplish this task.



Note: This kind of question will help in clearing HCL recruitment.

Input format :
The first line of the input consists of an integer 'n', which represents the size of the square matrix (n x n).

The second part contains 'n x n' integers representing the elements of the matrix in row-major order.

Output format :
The first matrix is the original matrix.

The second matrix is the matrix after a 90-degree clockwise rotation.



Refer to the sample output for formatting specifications.

Code constraints :
1 <= n <= 100

Sample test cases :
Input 1 :
3
1 2 3
4 5 6
7 8 9
Output 1 :
Original Matrix:
1 2 3 
4 5 6 
7 8 9 
Matrix after 90-degree clockwise rotation:
7 4 1 
8 5 2 
9 6 3 
Input 2 :
-2
Output 2 :
Size of the matrix should be positive!


// You are using GCC
#include <iostream>
using namespace std;

void rotateMatrix(int** matrix, int n) {
    // Transpose the matrix
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            swap(matrix[i][j], matrix[j][i]);
        }
    }

    // Reverse each row
    for (int i = 0; i < n; ++i) {
        int left = 0, right = n - 1;
        while (left < right) {
            swap(matrix[i][left], matrix[i][right]);
            left++;
            right--;
        }
    }
}

void printMatrix(int** matrix, int n) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            std::cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int n;
    cin >> n;

    if (n <= 0) {
        cout << "Size of the matrix should be positive!";
        return 0;
    }

    // Dynamically allocate memory for the 2D matrix
    int** matrix = new int*[n];
    for (int i = 0; i < n; ++i) {
        matrix[i] = new int[n];
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> matrix[i][j];
        }
    }

    cout << "Original Matrix:" << endl;
    printMatrix(matrix, n);

    rotateMatrix(matrix, n);

    cout << "Matrix after 90-degree clockwise rotation:" << endl;
    printMatrix(matrix, n);

    // Deallocate dynamically allocated memory for the matrix
    for (int i = 0; i < n; ++i) {
        delete[] matrix[i];
    }
    delete[] matrix;

    return 0;
}


Problem Statement



Sham is developing a dynamic text analysis tool that can take a paragraph as input and find the positions of two specific words in the paragraph.



The tool allows the user to dynamically input the paragraph, and it dynamically allocates memory to store the paragraph and two words to search for. The output dynamically displays the positions (indices) of the first occurrences of both words in the paragraph.



Note: This kind of question will help in clearing Deloitte recruitment.

Input format :
The first part of the input represents the paragraph.

The second part represents the first word to be found in the paragraph.

The third part represents the second word to find in the paragraph.

Output format :
The first line of the output displays the position of the first word.

The second line of the output displays the position of the second word.

If the word is not found, then output displays as the word is not found.



Refer to the sample output for formatting specifications.

Code constraints :
length of paragraph<1000

length of words<100

Sample test cases :
Input 1 :
This is a dynamic text analysis tool developed by Sham. It can find the positions of two words in a paragraph
dynamic
paragraph
Output 1 :
First occurrence of "dynamic" found at position: 4
First occurrence of "paragraph" found at position: 21
Input 2 :
The sun sets over the horizon, painting the sky in hues of orange and pink
sun
green
Output 2 :
First occurrence of "sun" found at position: 2
Word "green" not found in the paragraph.


// You are using GCC
#include <iostream>
#include <cstring>

// Function to read a word from the paragraph
char* readWordFromParagraph(const char* paragraph, int& index) {
    int length = 0;
    while (paragraph[index + length] != ' ' && paragraph[index + length] != '\0') {
        length++;
    }

    char* word = new char[length + 1];
    int i;
    for (i = 0; i < length; i++) {
        word[i] = paragraph[index + i];
    }
    word[i] = '\0';

    index += length;
    return word;
}

int main() {
    const int paragraphMaxLength = 1000;
    char paragraph[paragraphMaxLength];
    
    std::cin.getline(paragraph, paragraphMaxLength);

    int wordCount = 0;
    for (int i = 0; paragraph[i] != '\0'; i++) {
        if (paragraph[i] == ' ') {
            wordCount++;
        }
    }
    wordCount++; // Add one to account for the last word without a space after it

    char** words = new char*[wordCount];
    int currentIndex = 0;
    
    // Dynamically allocate memory for each word and store them in the 'words' array
    for (int i = 0; i < wordCount; i++) {
        words[i] = readWordFromParagraph(paragraph, currentIndex);
        currentIndex++; // Move past the space
    }

    // User inputs the two words to search for
    char searchWord1[100], searchWord2[100];
    std::cin >> searchWord1;

    std::cin >> searchWord2;

    // Search for the first occurrence of the two words
    int position1 = -1, position2 = -1;
    for (int i = 0; i < wordCount; i++) {
        if (strcmp(searchWord1, words[i]) == 0 && position1 == -1) {
            position1 = i + 1;
        }
        if (strcmp(searchWord2, words[i]) == 0 && position2 == -1) {
            position2 = i + 1;
        }
        if (position1 != -1 && position2 != -1) {
            break; // Both words found, no need to search further
        }
    }

    // Display the positions of the first occurrence of both words
    if (position1 != -1) {
        std::cout << "First occurrence of \"" << searchWord1 << "\" found at position: " << position1 << std::endl;
    } else {
        std::cout << "Word \"" << searchWord1 << "\" not found in the paragraph." << std::endl;
    }

    if (position2 != -1) {
        std::cout << "First occurrence of \"" << searchWord2 << "\" found at position: " << position2 << std::endl;
    } else {
        std::cout << "Word \"" << searchWord2 << "\" not found in the paragraph.";
    }

    // Free dynamically allocated memory for words
    for (int i = 0; i < wordCount; i++) {
        delete[] words[i];
    }
    delete[] words;

    return 0;
}


Problem Statement



Riya is working on a program for a stock management system in a retail store. The program should allow the user to input the number of items in stock and their respective quantities. Each item's quantity is the number of units available in the store.



Your task is to write code to implement the stock management system using dynamic memory allocation with new and delete. The program should work as follows:



Process the stock information as follows:



For the quantity of the first item, replace it with the sum of zero and the quantity of the next item.

For the quantity of the last item, replace it with the sum of the quantity of the previous item and zero.

For the quantity of other items, replace it with the sum of the quantity of the previous item and the quantity of the next item.

Input format :
The first line of input contains a single integer, N, representing the number of items in the inventory.

The following N lines contain the quantities of each item, one quantity per line. Each quantity is a non-negative integer.

Output format :
The output consists of a single line containing the modified array of item quantities, separated by a space.



Refer to the sample output for formatting specifications.

Code constraints :
1 <= size <= 1000 (the number of items in the inventory).

0 <= Quantity of each item <= 1000 (non-negative integers, representing the number of units available for each item in the warehouse).

Sample test cases :
Input 1 :
5
1 2 3 4 5
Output 1 :
Modified array: 2 4 6 8 4 


// You are using GCC
#include <iostream>
#include <algorithm>

int main() {
  // Get the size of the array from the user
 // std::cout << "Enter the size of the array: ";
  int size;
  std::cin >> size;

  // Allocate memory for the array using dynamic memory allocation
  int* array = new int[size];

  // Get the elements of the array from the user
 // std::cout << "Enter the elements of the array: ";
  for (int i = 0; i < size; i++) {
    std::cin >> array[i];
  }

  // Replace every element in the array with the sum of its previous and next element
  int temp = array[0];
  array[0] = array[1];
  for (int i = 1; i < size - 1; i++) {
    int sum = temp + array[i + 1];
    temp = array[i];
    array[i] = sum;
  }
  array[size - 1] = temp;

  // Print the modified array
  std::cout << "Modified array: ";
  for (int i = 0; i < size; i++) {
    std::cout << array[i] << " ";
  }
  std::cout << std::endl;

  // Deallocate the memory for the array
  delete[] array;

  return 0;
}



Problem Statement



Vijay is working on a program to perform polynomial operations dynamically. The program will take input from the user for two polynomials, evaluate them for a given value of 'x', and then compute their sum and difference.



Write a program that efficiently handles polynomial operations using dynamic memory allocation with the 'new' and 'delete' operators.



Note: This kind of question will help in clearing Amcat recruitment.

Input format :
The first line of the input contains the degree of Polynomial 1.

The next line contains the coefficients of Polynomial 1 in descending order, from the highest power to the constant term.

Similarly, the next line contains the degree of Polynomial 2.

The next line contains the coefficients of Polynomial 2 in descending order.

The last line contains the value of 'x' for polynomial evaluation.



Output format :
The output displays the polynomial expressions.

The next line displays the results of evaluating both polynomials at the given x.

The next line displays the sum of the two polynomials.

The last line displays the difference between the two polynomials.

Code constraints :
The degree of each polynomial will be a non-negative integer.

The coefficients of the polynomials will be integers.

The maximum degree allowed for a polynomial is 10.

The polynomial coefficients can be positive, negative, or zero.

Sample test cases :
Input 1 :
3
8 7 6 5
3
4 3 2 1
2
Output 1 :
8x^3 + 7x^2 + 6x + 5
4x^3 + 3x^2 + 2x + 1
109
49
12x^3 + 10x^2 + 8x + 6
4x^3 + 4x^2 + 4x + 4
Input 2 :
4
23 -5 12 0 10
3
65 -3 56 16
5
Output 2 :
23x^4 - 5x^3 + 12x^2 + 10
65x^3 - 3x^2 + 56x + 16
14060
8346
23x^4 + 60x^3 + 9x^2 + 56x + 26
23x^4 - 70x^3 + 15x^2 - 56x - 6


// You are using GCC

#include <iostream>




class Polynomial {

private:

int degree; // Degree of the polynomial

int* coefficients; // Array to store the coefficients




public:

// Constructor to create a polynomial with given degree and coefficients

Polynomial(int degree, int* coeffs) : degree(degree) {

coefficients = new int[degree + 1];

for (int i = 0; i <= degree; ++i) {

coefficients[i] = coeffs[i];

}

}




// Destructor to free the dynamically allocated memory

~Polynomial() {

delete[] coefficients;

}




// Function to evaluate the polynomial for a given value of x

int evaluate(int x) const {

int result = 0;

int x_power = 1;

for (int i = 0; i <= degree; ++i) {

result += coefficients[i] * x_power;

x_power *= x;

}

return result;

}




Polynomial add(const Polynomial& other) const {

int max_degree = std::max(degree, other.degree);

int* result_coeffs = new int[max_degree + 1];




for (int i = 0; i <= max_degree; ++i) {

int coeff1 = (i <= degree) ? coefficients[i] : 0;

int coeff2 = (i <= other.degree) ? other.coefficients[i] : 0;

result_coeffs[i] = coeff1 + coeff2;

}




Polynomial result(max_degree, result_coeffs);

delete[] result_coeffs;




return result;

}




Polynomial subtract(const Polynomial& other) const {

int max_degree = std::max(degree, other.degree);

int* result_coeffs = new int[max_degree + 1];




for (int i = 0; i <= max_degree; ++i) {

int coeff1 = (i <= degree) ? coefficients[i] : 0;

int coeff2 = (i <= other.degree) ? other.coefficients[i] : 0;

result_coeffs[i] = coeff1 - coeff2;

}




Polynomial result(max_degree, result_coeffs);

delete[] result_coeffs;




return result;

}




// Function to print the polynomial

void print() const {

for (int i = degree; i >= 0; --i) {

if (coefficients[i] != 0) {

if (i < degree) {

std::cout << ((coefficients[i] > 0) ? " + " : " - ");

}

std::cout << std::abs(coefficients[i]);

if (i > 0) {

std::cout << "x";

if (i > 1) {

std::cout << "^" << i;

}

}

}

}

std::cout << std::endl;

}

};




int main() {

int degree1, degree2;




std::cin >> degree1;

int* coeffs1 = new int[degree1 + 1];

for (int i = degree1; i >= 0; --i) {

std::cin >> coeffs1[i];

}

Polynomial poly1(degree1, coeffs1);




std::cin >> degree2;

int* coeffs2 = new int[degree2 + 1];

for (int i = degree2; i >= 0; --i) {

std::cin >> coeffs2[i];

}

Polynomial poly2(degree2, coeffs2);




poly1.print();




poly2.print();




int x;

std::cin >> x;

std::cout << poly1.evaluate(x) << std::endl;

std::cout << poly2.evaluate(x) << std::endl;




Polynomial sum = poly1.add(poly2);

sum.print();




Polynomial diff = poly1.subtract(poly2);

diff.print();




// Clean up dynamically allocated memory

delete[] coeffs1;

delete[] coeffs2;




return 0;

} 



Problem Statement



Jessi is designing a program to help a mathematician analyze large numbers and find the largest prime factor. Your program should dynamically allocate memory to store the prime factors of the given number and then display the largest prime factor as the result.



Write a program that takes an integer n as input and dynamically allocates memory to create an array to store the prime factors of n. Calculate and store all prime factors of n in the dynamically allocated array. Finally, print the largest prime factor.



Note: This kind of question will help in clearing Wipro recruitment.

Input format :
The input consists of a single integer, n. This integer represents the number for which you need to find the largest prime factor.

Output format :
The program outputs two lines.

The first line displays all the prime factors of the input number n separated by a space.

The second line displays the largest prime factor among them.

If the n is less than 2, it will be prints "No prime factors found for" with n value.



Refer to the sample output for formatting specifications.

Code constraints :
2 <= n <= 999

Sample test cases :
Input 1 :
2
Output 1 :
Prime factors of 2 are: 2 
Largest prime factor of 2 is: 2
Input 2 :
1
Output 2 :
No prime factors found for 1


// You are using GCC

#include <iostream>

using namespace std;

bool isPrime(int num) {

if (num <= 1)

return false;




for (int i = 2; i * i <= num; i++) {

if (num % i == 0)

return false;

}




return true;

}




int main() {

int n;

cin >> n;

int* primeFactors = new int[n];

int numFactors = 0;




for (int i = 2; i <= n; i++) {

if (n % i == 0 && isPrime(i)) {

primeFactors[numFactors] = i;

numFactors++;

}

}







if (numFactors == 0) {

cout << "No prime factors found for " << n;

} else {

int largestPrimeFactor = primeFactors[numFactors - 1];







cout << "Prime factors of " << n << " are: ";

for (int i = 0; i < numFactors; i++) {

cout << primeFactors[i] << " ";

}







cout << "\nLargest prime factor of " << n << " is: " << largestPrimeFactor;

}

delete[] primeFactors;

return 0;

} 



