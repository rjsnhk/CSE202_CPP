//////////////////////////////////
SACHIN
///////////////////////////////




Janu has been assigned to develop a basic calculator application that performs four arithmetic operations: addition, subtraction, multiplication, and division. The application should be implemented using object-oriented programming concepts.



You are required to implement a calculator application that allows users to perform arithmetic operations on two numbers. The application should have a base class operationsBase that declares four pure virtual functions: addition(), subtraction(), multiplication(), and division(). This base class will act as an interface for the calculator's operations.



Next, you need to create a derived class, operationsDerived, that inherits from the operationsBase class. This derived class should implement the four arithmetic operations using the two private integer member variables a and b.



The main function should create an object of the operationsDerived class and prompt the user to enter two integer values. Then, it should perform each operation and display the results.

Input format :
The input consists of two integer values, a and b, separated by a space.

Output format :
The output displays the results of the four arithmetic operations: addition, subtraction, multiplication, and division. Each result will be separated by a space.

In the case of division by zero, an error message will be displayed on a separate line.



Refer to the sample output for the formatting specifications.

Code constraints :
The input integers a and b should be within the range of a 32-bit signed integer (-2,147,483,648 to 2,147,483,647).

The division operation should be valid, i.e., the value of b should not be zero.

Sample test cases :
Input 1 :
20 10
Output 1 :
30 10 200 2 
Input 2 :
5248 0
Output 2 :
5248 5248 0 
Division by 0 is not allowed.
Input 3 :
-10 10
Output 3 :
0 -20 -100 -1 
Whitelist


// You are using GCC
#include<bits/stdc++.h>
using namespace std;

class operationsBase
{
public:
	virtual void addition() = 0;
	virtual void subtraction() = 0;
	virtual void multiplication() = 0;
	virtual void division() = 0;
};
class operationsDerived : public operationsBase
{
	int a,b;
    public:
	int get()
	{
	    cin>>a>>b;
	}
	void addition()
	{
	    cout<<a+b<<" ";
	}
	void subtraction()
	{
	    cout<<a-b<<" ";
	}
	void multiplication()
	{
	    cout<<a*b<<" ";
	}
	void division()
	{
	    if(b != 0){
	    cout<<a/b<<" ";
	    }
	    
	    else {
	        cout << "\nDivision by 0 is not allowed.";
	    }
	}
};

int main()
{
	operationsDerived od;
	od.get();
	od.addition();
	od.subtraction();
	od.multiplication();
	od.division();
	return 0;
}


roblem Statement



Create a simple banking application that allows customers to interact with their savings account. Implement an abstract base class Account with pure virtual functions display(), deposit(double amount), and withdraw(double amount). 



Create a derived class called savingsAccount that inherits from Account. The savingsAccount class should allow users to input their account number, name, and initial balance. It should also provide functionality for depositing and withdrawing money, displaying the updated balance, and handling insufficient balance scenarios during withdrawals.

Input format :
The input consists of the following components:



If the choice is 1, enter the accountnumber (integer), name (a string without spaces), and balance (a floating-point number) representing account details.

If the choice is 2 (deposit) or 3 (withdrawal), a floating-point number represents the deposit or withdrawal amount.

Output format :
Output displays (choice 1) the three space-separated values: accountnumber (integer), name (string), and balance (floating-point number) with two decimal places.



If the choice is either 2 (deposit) or 3 (withdrawal),

The output will display a message indicating the result of the transaction:

"Balance after deposit: updated_balance": If a deposit transaction is successful.

"Balance after withdrawal: updated_balance": If a withdrawal transaction is successful.

"Insufficient balance for withdrawal!": If the withdrawal amount is greater than the account balance.



Refer to the sample output for the formatting specifications.

Code constraints :
The value of choice can only be 1.

The value of accno will be a positive integer.

The value of name will be a string containing alphabets and/or digits (no spaces).

The value of balance will be a non-negative floating-point number.

The value of the option can only be 2 or 3.

The value of the amount will be a non-negative floating-point number.

Sample test cases :
Input 1 :
1
2448 alice 2548
2
1000
Output 1 :
2448 alice 2548.00
Balance after deposit: 3548.00
2448 alice 3548.00
Input 2 :
1
2448 alice 1000
3
500
Output 2 :
2448 alice 1000.00
Balance after withdrawal: 500.00
2448 alice 500.00
Input 3 :
1
2448 Bob 1000
3
1200
Output 3 :
2448 Bob 1000.00
Insufficient balance for withdrawal!
2448 Bob 1000.00
Input 4 :
1
2448 Bob 1000
4
Output 4 :
2448 Bob 1000.00
Invalid option
2448 Bob 1000.00



// You are using GCC
#include<bits/stdc++.h>
#include<string>
using namespace std;

class Account
{
public:
    virtual void display() = 0;
    virtual void deposit(double amount) = 0;
    virtual void withdraw(double amount) = 0;
};

 
class savingsAccount : public Account
{
    int accno;
    double balance;
    string name;

public:
    void get()
    {
        cin >> accno >> name >> balance;
    }
    void deposit(double amount)
    {
        balance = (balance + amount);
        cout << "Balance after deposit: " << fixed << setprecision(2) << balance << "\n";
    }
    void withdraw(double amount)
    {
        if (amount <= balance)
        {
            balance = (balance - amount);
            cout << "Balance after withdrawal: " << fixed << setprecision(2) << balance << "\n";
        }
        else
        {
            cout << "Insufficient balance for withdrawal!\n";
        }
    }
    void display()
    {
        cout << accno << " " << name << " " << fixed << setprecision(2) << balance << "\n";
    }
};

int main()
{
    int choice;
    cin >> choice;
    if (choice == 1)
    {
        savingsAccount s;
        s.get();
        s.display();

        int option;
        double amount;
        cin >> option;
        if (option == 2)
        {
            cin >> amount;
            s.deposit(amount);
        }
        else if (option == 3)
        {
            cin >> amount;
            s.withdraw(amount);
        }
        else
        {
            cout << "Invalid option\n";
        }

        s.display();
    }
}


Problem Statement



Imagine you are developing an online shopping store where customers can purchase different types of items. The store offers two main categories of items: "Wooden Items" and "Electronics." As part of the system, you are required to create a program that calculates the total amount a customer needs to pay based on the type and quantity of items they choose to purchase.



ItemType (Abstract Base Class): This is an abstract base class that defines a pure virtual function calculateAmount() which calculates the total amount of the items to be purchased. It acts as a blueprint for the derived classes.



Wooden (Derived from ItemType): This class represents wooden items available in the store. It has two private data members: noOfItems (representing the quantity of wooden items) and cost (representing the cost of each wooden item). The class implements the calculateAmount() function by multiplying the quantity with the cost per item.



Electronics (Derived from ItemType): This class represents electronic items available in the store. It has one private data member cost (representing the cost of the electronic item). The class implements the calculateAmount() function by applying a 20% discount on the cost of the electronic item.



Finally, the program should display the total amount for the customer's purchase based on the selected type of items, considering any discounts or unique costs for wooden items.

Input format :
The first line of the input consists of the choice.

If the choice is 1, enter the number of items and their cost.

If the choice is 2, enter the cost.

Output format :
The output consists of a single line with the calculated total amount for the customer's purchase. Round off the output to two decimal places.

Code constraints :
The value of choice can only be 1 or 2.

For wooden items:

The value of noOfItems will be a positive integer.

The value of cost will be a non-negative floating-point number.

For electronic items:

The value of cost will be a non-negative floating-point number.

Sample test cases :
Input 1 :
1
5 840.00
Output 1 :
4200.00
Input 2 :
2
1800.50
Output 2 :
1440.40


// You are using GCC
#include<bits/stdc++.h>
using namespace std;

class ItemType
{
public:
	virtual double calculateAmount() = 0;
};

class wooden: public ItemType
{
    int noOfItems;
    double cost;
    public:
        int get()
        {
            cin>>noOfItems>>cost;
        }
        double calculateAmount()
        {
            return noOfItems*cost;
        }
	    
};

class electronics: public ItemType
{
    double cost;
    public:
        int get()
        {
            cin>>cost;
        }
        double calculateAmount()
        {
            double discount = cost * 0.20;
            return (cost-discount);
        }
	    
};

int main()
{
    int choice;
    cin>>choice;
    if(choice ==1)
    {
        wooden w;
        w.get();
        cout<<fixed<<setprecision(2)<<w.calculateAmount();
    }
    if(choice ==2)
    {
        electronics e;
        e.get();
        cout<<fixed<<setprecision(2)<<e.calculateAmount();
    }
    
}



Satha is working on a project that involves number manipulation using object-oriented programming. Your task is to create a class hierarchy that allows you to perform various operations on an integer and display the result. The base class, "A", is an abstract class with a pure virtual function, print(), while the derived class, "B", implements this function and provides additional functionalities for number operations.



Write a program to find whether the given number(x) is even or odd; if it is even, then print the cube(x)+square(x) otherwise, print cube(x)-square(x).



Create a base class with a pure virtual function, void print(). Print the result by implementing this virtual function in the derived class.

Input format :
The input consists of an Integer.

Output format :
If the given number is even, the output will be the sum of the cube and square of the number.

If the given number is odd, the output will be the difference between the cube and square of the number.

Code constraints :
1<=n<=100

Sample test cases :
Input 1 :
5
Output 1 :
100
Input 2 :
4
Output 2 :
80
Whitelist


// You are using GCC
#include <iostream>

using namespace std;
class A{
    public:
   
    virtual void print()=0;
};
class B: public A{
    public:
    int x=9;
    int EvenOrOdd(int a) {
        if(a%2==0) return 1;
        else return 0;
    }
    int cube(int n) {
        return (n*n*n);
    }
    int square(int n) {
        return (n*n);
    }
    int sum(int a,int b){
        return (a+b);
    }
    int sub(int a,int b) {
        return (a-b);
    }
    void print() override{
        cout<<x;
    }
};

int main()
{
   int n;
   cin>>n;
   B ob;
   
   if(ob.EvenOrOdd(n)==1){
       ob.x=ob.sum(ob.cube(n),ob.square(n));
       ob.print();
   }
   else{
       ob.x=ob.sub(ob.cube(n),ob.square(n));
       ob.print();
   }
   
   return 0;
}


Problem Statement



You are tasked with developing a simple electricity billing system for a household. The household has three types of electrical appliances: Fans, Lights, and TVs. Each appliance is rated with a specific power consumption in watts (w) and the number of hours (hrs) it is used per day. The electricity tariff is based on the total energy consumed by all the appliances, and the cost is calculated as follows:



For each appliance, the total energy consumption (in kWh) is calculated as the product of its power rating (in watts) and the number of hours it is used per day.



The cost for each appliance is determined by multiplying the total energy consumption (in kWh) by the electricity tariff rate, which is $1.5 per kWh.



To implement the electricity billing system, create an abstract class currentBill, which will serve as the base class for three derived classes: Fan, Light, and TV. Each derived class will implement the amount() function to calculate the electricity bill for the specific appliance type.

Input format :
The first line consists of the power rating of the fan and the total hours used, separated by space.

The second line consists of the power rating of the light and the total hours used, separated by space.

The third line consists of the power rating of the TV and the total hours used, separated by space.

Output format :
The output prints the total bill amount.

Code constraints :
Power rating >0

Total hours >0

Sample test cases :
Input 1 :
40 123
55 200
33 400
Output 1 :
43.68
Input 2 :
60 300
54 360
30 720
Output 2 :
88.56


// You are using GCC
#include <iostream>

using namespace std;
class currentBill{
    public:
   
    virtual double amount()=0;
};

class Fan: public currentBill{
    public:
    int watts,hrs;
    double amount(){
        double t=watts*hrs;
        double a= (t/1000)*1.5;
        return a;
    }
};

class Light: public currentBill{
    public:
    int watts,hrs;
    double amount(){
        double t=watts*hrs;
        double a= (t/1000)*1.5;
        return a;
    }
};
class TV: public currentBill{
    public:
    int watts,hrs;
    double amount(){
        double t=watts*hrs;
        double a= (t/1000)*1.5;
        return a;
    }
};
int main()
{
   Fan f;
   cin>>f.watts>>f.hrs;
   Light l;
   cin>>l.watts>>l.hrs;
   TV t;
   cin>>t.watts>>t.hrs;
   cout<<f.amount()+l.amount()+t.amount();
   return 0;
}


You are tasked with creating a simple quiz game where players answer four questions, and based on their responses, a scoring system will be implemented. To achieve this, use an abstract base class, Base, with a pure virtual function, game(). Create a derived class Derived that inherits from Base and implements the game() function to calculate the player's score.



The scoring criteria are as follows: +10 points for each correct answer (character between 'A' and 'Z'), and -5 points for each incorrect answer. After receiving the player's answers, display their total score on the screen.

Input format :
The input consists of four characters separated by a space.

Output format :
The output prints the total score.



Refer to the sample output for formatting specifications.

Code constraints :
The input should be a valid letter from the English alphabet (A to Z or a to z).

Sample test cases :
Input 1 :
A F K R
Output 1 :
Score : 40
Input 2 :
A b D f
Output 2 :
Score : 10


// You are using GCC
#include <iostream>

using namespace std;
class Base{
    public:
   
    virtual void game()=0;
};
class Derived: public Base{
    public:
    char a,b,c,d;
    int s=0;
    void game() override{
        if(a>='A'&&a<='Z'){
           s=s+10; 
        }
        else{
            s=s-5;
        }
        if(b>='A'&&b<='Z'){
           s=s+10; 
        }
        else{
            s=s-5;
        }
        if(c>='A'&&c<='Z'){
           s=s+10; 
        }
        else{
            s=s-5;
        }
        if(d>='A'&&d<='Z'){
           s=s+10; 
        }
        else{
            s=s-5;
        }
        cout<<"Score : "<<s;
    }
};

int main()
{
  Derived dd;
   cin>>dd.a>>dd.b>>dd.c>>dd.d;
   dd.game();
   
   return 0;
}


Single File Programming Question
Problem statement



You are working as a programmer in a school, and your task is to create a program that manages student records using a linked list. Each node in the linked list represents a student record with the following fields:



data: An integer representing the student's roll number.

next: A pointer to the next student record in the linked list.

Your program should have the following functionalities:



Adding Student Records: The program should allow the user to enter integer values (student roll numbers) one by one to create a linked list of student records. The input process should continue until the user enters -1, indicating that no more students need to be added.



Printing Student Records: After the user finishes adding student records, the program should print the linked list elements (i.e., the roll numbers of all students) in the order they were entered.



Cleaning up Memory: It's essential to manage memory properly to avoid memory leaks. After printing the student records, the program should clean up the memory occupied by the linked list nodes to ensure efficient memory usage.



Your task is to implement the program following the provided code template and ensure that it meets the specified requirements. Test the program by adding student records and verifying that the printing and memory cleanup work correctly.

Input format :
First line of the input consists of list of elements. Enter -1 to stop the input.

Output format :
The output displays the list elements.

Code constraints :
numbers > 0

Sample test cases :
Input 1 :
98 78 67 65 54 -1
Output 1 :


// You are using GCC
#include <iostream>

class ListNode {
public:
    int data;
    ListNode* next;

    ListNode(int value) : data(value), next(nullptr) {}
};

void insertNode(ListNode*& head, int value) {
    if (head == nullptr) {
        head = new ListNode(value);
    } else {
        ListNode* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = new ListNode(value);
    }
}

void printList(ListNode* head) {
    ListNode* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

int main() {
    ListNode* head = nullptr;
    int value;
    while (true) {
        std::cin >> value;
        if (value == -1) {
            break;
        }
        insertNode(head, value);
    }
    printList(head);
    ListNode* current = head;
    while (current != nullptr) {
        ListNode* temp = current;
        current = current->next;
        delete temp;
    }
    return 0;
}


Problem Statement



You are developing an online shopping cart application. To represent the items available for purchase, you need to create a concrete class called Product. The Product class should have attributes such as product name, price per item, and quantity. You are required to implement member functions within the class to perform the following operations:



Add products to the cart: The user can add more quantities of a product to the cart.

Calculate the total bill: Calculate the total bill for the products in the cart, considering the product price and quantity.

Display the cart contents: Display the name, price per item, and total quantity of the products present in the cart.

Input format :
The first line contains the product name as a string.

The second line contains the price per item, a positive integer.

The third line contains the initial quantity of the product, a non-negative integer.

The fourth line contains an integer, the quantity to add to the cart.

Output format :
The output displays the product name, price per item, and the updated total quantity in the cart.

The output should also display the total bill for the products in the cart, considering the updated quantities.



Refer to the sample output for formatting specifications.

Code constraints :
The product name is a non-empty string containing alphanumeric characters and spaces.

The price of a product is a positive floating-point number.

The quantity of a product is a positive integer.

Sample test cases :
Input 1 :
Laptop
1200
3
2
Output 1 :
Product Name: Laptop
Price per item: $1200
Quantity: 5
Total Bill: $6000
Input 2 :
Mobile Phone
800
2
3
Output 2 :
Product Name: Mobile Phone
Price per item: $800
Quantity: 5
Total Bill: $4000



// You are using GCC
#include <iostream>
#include <string>

using namespace std;

class Product {
private:
    string name;
    double price;
    int quantity;

public:

    Product(string pname, double pprice, int pquantity) {
        name = pname;
        price = pprice;
        quantity = pquantity;
    }
    void addToCart(int quantityToAdd) {
        quantity += quantityToAdd;
    }
    double calculateTotalBill() {
        return price * quantity;
    }
    void displayCartContents() {
        cout << "Product Name: " << name << endl;
        cout << "Price per item: $" << price << endl;
        cout << "Quantity: " << quantity << endl;
    }
};

int main() {
    string productName;
    double productPrice;
    int productQuantity;
    getline(cin, productName);
    cin >> productPrice;
    cin >> productQuantity;
    Product product(productName, productPrice, productQuantity);
    int quantityToAdd;
    cin >> quantityToAdd;
    product.addToCart(quantityToAdd);
    product.displayCartContents();
    cout << "Total Bill: $" << product.calculateTotalBill() << endl;

    return 0;
}



Problem Statement



The Human Resources Department at ABC Corporation needs a program to manage employee information and find the highest-paid employee. They require a concrete class named "Employee" to represent individual employee details. The "Employee" class should be a concrete implementation with private attributes to store the employee name, employee ID, and monthly salary. The class should provide methods to update the salary and display the employee's information.



Once the user provides the employee details, the program should create an array of "Employee" objects and store each employee's information in the array.



Next, the program should find the highest-paid employee among the entered employees and display their details, including their name, employee ID, and monthly salary.



To achieve this, the program should define the "Employee" class as a concrete class with appropriate member functions to manage the employee information. The class should include a constructor to initialize the employee details, a function to update the salary, and a function to display the employee's information.



Finally, after displaying the highest-paid employee's details, the program should deallocate the memory used for the array of employees before terminating.

Input format :
The first line of input contains an integer, which represents the total number of employees in the company.

For each employee, there will be three lines of input:

The employee's name (a string containing alphabets and spaces).
The employee's ID (an integer)
The employee's salary (an integer)
Output format :
The output will display the details of the highest-paid employee.



Refer to the sample output for formatting specifications.

Code constraints :
The number of employees will be a positive integer (1 <= numEmployees <= 1000).

Each employee's name will be a string containing alphabets and spaces only. The length of the name will not exceed 100 characters.

Employee ID will be a positive integer (1 <= employeeID <= 10000).

Salary will be a floating-point number, representing the employee's monthly salary. Salary will be in the range of 1000 to 100000.

Sample test cases :
Input 1 :
5
Alice Anderson
201
42000
Bob Brown
202
48000
Claire Carter
203
51000
David Davis
204
44000
Eva Evans
205
49000
Output 1 :
Employee Name: Claire Carter
Employee ID: 203
Salary: 51000
Input 2 :
3
John Doe
101
50000
Jane Smith
102
55000
Michael Johnson
103
48000
Output 2 :
Employee Name: Jane Smith
Employee ID: 102
Salary: 55000


// You are using GCC
#include <iostream>
#include <string>

using namespace std;

class Employee {
private:
    string name;
    int employeeID;
    double salary;

public:
    // Constructor to initialize employee details
    Employee(string empName, int empID, double empSalary) {
        name = empName;
        employeeID = empID;
        salary = empSalary;
    }

    // Function to update salary
    void updateSalary(double newSalary) {
        salary = newSalary;
    }

    // Function to display employee information
    void displayInfo() {
        cout << "Employee Name: " << name << endl;
        cout << "Employee ID: " << employeeID << endl;
        cout << "Salary: " << salary << endl;
    }

    // Getters for name, employeeID, and salary
    string getName() const {
        return name;
    }

    int getEmployeeID() const {
        return employeeID;
    }

    double getSalary() const {
        return salary;
    }
};

int main() {
    int numEmployees;
    cin >> numEmployees;

    Employee* employees[numEmployees];

    // Input employee details and store them in the array
    for (int i = 0; i < numEmployees; i++) {
        string name;
        int empID;
        double salary;

        cin.ignore();
        getline(cin, name);

        cin >> empID;

        cin >> salary;

        employees[i] = new Employee(name, empID, salary);
    }

    // Find the highest paid employee
    double maxSalary = employees[0]->getSalary();
    int maxIndex = 0;
    for (int i = 1; i < numEmployees; i++) {
        if (employees[i]->getSalary() > maxSalary) {
            maxSalary = employees[i]->getSalary();
            maxIndex = i;
        }
    }

   // cout << "Details of the highest paid employee:\n";
    employees[maxIndex]->displayInfo();

    // Deallocate memory
    for (int i = 0; i < numEmployees; i++) {
        delete employees[i];
    }

    return 0;
}



Problem Statement



You are tasked with creating a program to manage product information and related products in a self-referential manner. The program should allow the user to input details for multiple products and their related products. Each product can have up to 10 related products, and the user can add related products to each product. Additionally, the program should provide functionality to find frequently bought together products for each product.

Input format :
An integer numProducts (1 <= numProducts <= 10) represents the total number of products to be entered.

For each product, the following information is provided:

A string productName represents the name of the product (up to 100 characters).

A floating-point number productPrice represents the price of the product.

A series of 'y' or 'n' choices for adding related products. If 'y' is chosen, the user must input the related product's name and price.

Output format :
For each product, the program will display the following:



The product name and price.

The list of related products frequently bought together with the product.

Code constraints :
The maximum number of products that can be entered is 10.

Each product can have a maximum of 10 related products.

Product names and related product names can contain alphabets, digits, and spaces.

Product prices are represented as floating-point numbers.

Sample test cases :
Input 1 :
2
milk
10.00
y
bread
20.50
y
butter
30.00
n
shirt
10.50
y
pant
20.00
n
Output 1 :
Products frequently bought together with milk:
- bread
- butter

Products frequently bought together with shirt:
- pant

Input 2 :
4
Book
10.00
y
Pen
2.50
n
T-Shirt
15.99
n
Keychain
3.49
n
Headphones
29.99
n
Backpack
24.50
y
Book
10.00
n
Output 2 :
Products frequently bought together with Book:
- Pen

Products frequently bought together with T-Shirt:

Products frequently bought together with Keychain:

Products frequently bought together with Headphones:



// You are using GCC
#include <iostream>
#include <string>

class Product {
private:
    std::string name;
    float price;
    Product** relatedProducts;
    int numRelatedProducts;
    int maxRelatedProducts;

public:
    Product(std::string productName, float productPrice) : name(productName), price(productPrice), numRelatedProducts(0), maxRelatedProducts(10) {
        relatedProducts = new Product*[maxRelatedProducts];
        for (int i = 0; i < maxRelatedProducts; ++i) {
            relatedProducts[i] = nullptr;
        }
    }

    ~Product() {
        delete[] relatedProducts;
    }

    void addRelatedProduct(Product* relatedProduct) {
        if (numRelatedProducts >= maxRelatedProducts) {
            return;
        }

        relatedProducts[numRelatedProducts++] = relatedProduct;
    }

    void removeRelatedProduct(Product* relatedProduct) {
        int index = -1;
        for (int i = 0; i < numRelatedProducts; ++i) {
            if (relatedProducts[i] == relatedProduct) {
                index = i;
                break;
            }
        }

        if (index == -1) {
            return;
        }
        for (int i = index; i < numRelatedProducts - 1; ++i) {
            relatedProducts[i] = relatedProducts[i + 1];
        }

        relatedProducts[numRelatedProducts - 1] = nullptr;
        --numRelatedProducts;
    }

    void findFrequentlyBoughtTogether() {
        std::cout << "Products frequently bought together with " << name << ":\n";
        for (int i = 0; i < numRelatedProducts; ++i) {
            std::cout << "- " << relatedProducts[i]->name << "\n";
        }
    }

    void displayProductDetails() {
        std::cout << "Product Name: " << name << "\n";
        std::cout << "Price: $" << price << "\n";
    }
};

int main() {
    int numProducts;
    std::cin >> numProducts;
    std::cin.ignore();
    Product** products = new Product*[numProducts];

    for (int i = 0; i < numProducts; ++i) {
        std::string name;
        float price;
        std::getline(std::cin, name);
        std::cin >> price;

        std::cin.ignore();

        products[i] = new Product(name, price);

        char choice;
        do {
            std::cin >> choice;
            std::cin.ignore();

            if (choice == 'y' || choice == 'Y') {
                std::string relatedName;
                float relatedPrice;
                std::getline(std::cin, relatedName);
                std::cin >> relatedPrice;
                std::cin.ignore();
                Product* relatedProduct = new Product(relatedName, relatedPrice);
                products[i]->addRelatedProduct(relatedProduct);
            }
        } while (choice == 'y' || choice == 'Y');
    }

    for (int i = 0; i < numProducts; ++i) {
        products[i]->findFrequentlyBoughtTogether();
        std::cout << "\n";
    }

    for (int i = 0; i < numProducts; ++i) {
        delete products[i];
    }
    delete[] products;
    return 0;
}


Problem Statement



Design a program to calculate the total price of products in an online store based on their specific pricing rules. The program should utilize an abstract class called "Product" to represent a generic product and provide a framework for calculating the total price. Implement two derived classes, "Electronics" and "Apparel," which inherit from the abstract class and provide their own implementations for calculating the total price based on their specific pricing rules.



Note: The abstract class "Product" serves as a blueprint for the derived classes "Electronics" and "Apparel." It enforces the implementation of a "calculateTotalPrice" method in the derived classes to calculate the total price based on their specific pricing rules. This approach ensures code reusability and flexibility to accommodate various types of products with their unique pricing calculations.



Note: This kind of question will help in clearing mPhasis recruitment.

Input format :
The first line of the input represents the price of the electronics product.

The second line of the input represents the discount percentage for the electronics product.

The third line of the input represents the price of the apparel product.

The fourth line of the input represents the tax percentage for the apparel product.

Output format :
The total price of the electronics product after applying the discount.

The total price of the apparel product after applying the tax.

Code constraints :
The price, discount, and tax values are non-negative.



Sample test cases :
Input 1 :
500.00
15.00
250.00
8.5
Output 1 :
425.00
271.25
Input 2 :
2000.00
15.5
300.00
12.00
Output 2 :
1690.00
336.00



// You are using GCC

#include <iostream>

#include <iomanip>

#include <cmath>




class Product {

public:

// Abstract method to calculate the total price

virtual double calculateTotalPrice() const = 0;

};




// Derived class representing an electronics product

class Electronics : public Product {

private:

double price;

double discount;




public:

// Constructor

Electronics(double price, double discount) : price(price), discount(discount) {}




// Implementation of calculateTotalPrice for Electronics

double calculateTotalPrice() const override {

double discountedPrice = price - (price * (discount / 100.0));

return roundToTwoDecimalPlaces(discountedPrice);

}




private:

// Helper function to round off to two decimal places

double roundToTwoDecimalPlaces(double value) const {

return std::round(value * 100.0) / 100.0;

}

};




// Derived class representing an apparel product

class Apparel : public Product {

private:

double price;

double tax;




public:

// Constructor

Apparel(double price, double tax) : price(price), tax(tax) {}




// Implementation of calculateTotalPrice for Apparel

double calculateTotalPrice() const override {

double totalPrice = price + (price * (tax / 100.0));

return roundToTwoDecimalPlaces(totalPrice);

}




private:

// Helper function to round off to two decimal places

double roundToTwoDecimalPlaces(double value) const {

return std::round(value * 100.0) / 100.0;

}

};




int main() {

double electronicsPrice, electronicsDiscount, apparelPrice, apparelTax;




// Get input from the user for electronics price and discount

std::cin >> electronicsPrice;

std::cin >> electronicsDiscount;




// Get input from the user for apparel price and tax

std::cin >> apparelPrice;

std::cin >> apparelTax;




// Create objects of derived classes

Electronics electronics(electronicsPrice, electronicsDiscount);

Apparel apparel(apparelPrice, apparelTax);




// Calculate and display the total prices

std::cout << std::fixed << std::setprecision(2); // Set precision to 2 decimal places

std::cout << electronics.calculateTotalPrice() << std::endl;

std::cout << apparel.calculateTotalPrice();




return 0;

} 



Problem Statement



Design an abstract class called "Person" that represents a generic person in a university management system. The abstract class should have abstract methods for displaying personal information and calculating salary. Implement two derived classes, "Faculty" and "Staff," that inherit from the abstract class and provide their own implementations for displaying information and calculating salary based on their roles within the university.



Note: This kind of question will help in clearing mPhasis recruitment.

Input format :
For Faculty:

The first line contains the name of the faculty member.

The second Line contains the age of the faculty member.

The third Line represents the number of teaching hours for the faculty member.

The fourth Line represents the hourly rate for the faculty member.



For Staff:

The first Line represents the name of the staff member.

The second Line represents the age of the staff member.

The third Line represents the monthly pay for the staff member.

Output format :
The program will display the following information for each person:

Name: The name of the person

Age: The age of the person



For Faculty:

Teaching Hours: The number of teaching hours

Salary: The calculated salary based on teaching hours and hourly rate



For Staff:

Salary: The monthly pay



Refer to the sample output for formatting specifications.

Code constraints :
name length<=100

18<=age<=100

Sample test cases :
Input 1 :
John
35
20.5
1500.00
Jane
28
30000
Output 1 :
Faculty Information:
Name: John
Age: 35
Teaching Hours: 20.5
Salary: 30750.00

Staff Information:
Name: Jane
Age: 28
Salary: 30000.00
Input 2 :
Alice
40
15.25
1000
Bob
29
45000
Output 2 :
Faculty Information:
Name: Alice
Age: 40
Teaching Hours: 15.25
Salary: 15250.00

Staff Information:
Name: Bob
Age: 29
Salary: 45000.00



// You are using GCC

#include <iostream>

#include <string>

#include <iomanip> // for std::setprecision




using namespace std;




// Abstract class representing a generic person

class Person {

protected:

string name;

int age;




public:

Person(const string& name, int age) : name(name), age(age) {}




// Abstract method for displaying personal information

virtual void displayInformation() = 0;




// Abstract method for calculating salary

virtual double calculateSalary() = 0;

};




// Derived class representing a faculty member

class Faculty : public Person {

private:

double teachingHours;

double hourlyRate;




public:

Faculty(const string& name, int age, double teachingHours, double hourlyRate)

: Person(name, age), teachingHours(teachingHours), hourlyRate(hourlyRate) {}




// Override method to display faculty information

void displayInformation() override {

cout << "Faculty Information:" << endl;

cout << "Name: " << name << endl;

cout << "Age: " << age << endl;

cout << "Teaching Hours: " << teachingHours << endl;

}




// Override method to calculate faculty salary

double calculateSalary() override {

return teachingHours * hourlyRate;

}

};




// Derived class representing a staff member

class Staff : public Person {

private:

double monthlyPay;




public:

Staff(const string& name, int age, double monthlyPay)

: Person(name, age), monthlyPay(monthlyPay) {}




// Override method to display staff information

void displayInformation() override {

cout << "Staff Information:" << endl;

cout << "Name: " << name << endl;

cout << "Age: " << age << endl;

}




// Override method to calculate staff salary

double calculateSalary() override {

return monthlyPay;

}

};




int main() {

string name;

int age;

double teachingHours, hourlyRate, monthlyPay;




// Get faculty information from the user

getline(cin, name);

cin >> age;

cin >> teachingHours;

cin >> hourlyRate;

cin.ignore(); // Ignore the newline character in the input buffer




// Create a faculty object

Faculty faculty(name, age, teachingHours, hourlyRate);




// Get staff information from the user

getline(cin, name);

cin >> age;

cin >> monthlyPay;

cin.ignore(); // Ignore the newline character in the input buffer




// Create a staff object

Staff staff(name, age, monthlyPay);




// Display faculty information and salary

faculty.displayInformation();

cout << fixed << setprecision(2); // Set precision to two decimal places

cout << "Salary: " << faculty.calculateSalary() << endl;

cout << endl;




// Display staff information and salary

staff.displayInformation();

cout << "Salary: " << staff.calculateSalary();




return 0;

} 



Problem Statement



Develop an abstract class named "Account" that includes abstract methods for depositing and withdrawing funds. Create two classes, "SavingsAccount" and "CheckingAccount," which inherit from the abstract class and implement the abstract methods accordingly. Design a banking system that allows customers to perform transactions, such as depositing and withdrawing money from their accounts.



Note: This kind of question will help in clearing Infosys recruitment.

Input format :
The input format is as follows:



The user is to enter an integer choice corresponding to the desired action:

1: Deposit

2: Withdraw

3: Display Balance

0: Exit

If the user chooses to deposit or withdraw, they need to enter a value representing the amount of money to be deposited or withdrawn.



Refer to the sample input for formatting specifications.

Output format :
The output format is as follows:



For Deposit:

The output will display "Amount deposited: [amount]"

For Withdraw:

The output will display:

If the withdrawal is successful: "Amount withdrawn: [amount]"

If there are insufficient funds: "Insufficient funds. Withdrawal canceled."

For Display Balance:

The output will display: "Account Balance: [balance]"

For Exiting the program:

The output will display "Exiting the program. Goodbye!"

For Invalid choice:

The output will displays: "Invalid choice. Please try again."



Refer to the sample output for formatting specifications.



Code constraints :
The transaction amount (deposit or withdrawal) should be a non-negative number.

The program will only accept the specified numeric choices (1, 2, 3, or 0).

The program will continue running in a loop until the user enters "0" to exit.



Sample test cases :
Input 1 :
1
1000
2
500
3
0
Output 1 :
Amount deposited: 1000
Amount withdrawn: 500
Savings Account Balance: 500
Exiting the program. Goodbye!
Input 2 :
2
500
3
0
Output 2 :
Insufficient funds. Withdrawal canceled.
Savings Account Balance: 0
Exiting the program. Goodbye!




// You are using GCC

#include <iostream>




using namespace std;




// Abstract Account class

class Account {

protected:

double balance;

public:

Account() : balance(0.0) {}

virtual void deposit(double amount) = 0;

virtual void withdraw(double amount) = 0;

virtual void displayBalance() = 0;

};




// SavingsAccount class derived from Account

class SavingsAccount : public Account {

public:

void deposit(double amount) override {

balance += amount;

cout << "Amount deposited: " << amount << endl;

}

void withdraw(double amount) override {

if (balance - amount >= 0) {

balance -= amount;

cout << "Amount withdrawn: " << amount << endl;

} else {

cout << "Insufficient funds. Withdrawal canceled." << endl;

}

}

void displayBalance() override {

cout << "Savings Account Balance: " << balance << endl;

}

};




// CheckingAccount class derived from Account

class CheckingAccount : public Account {

public:

void deposit(double amount) override {

balance += amount;

cout << "Amount deposited: " << amount << endl;

}

void withdraw(double amount) override {

if (balance - amount >= 0) {

balance -= amount;

cout << "Amount withdrawn: " << amount << endl;

} else {

cout << "Insufficient funds. Withdrawal canceled." << endl;

}

}

void displayBalance() override {

cout << "Checking Account Balance: " << balance << endl;

}

};




int main() {

// Create objects for savings and checking accounts

SavingsAccount savingsAccount;

CheckingAccount checkingAccount;




// Perform transactions

int choice;

double amount;




/*cout << "Banking System" << endl;

cout << "1. Deposit" << endl;

cout << "2. Withdraw" << endl;

cout << "3. Display Balance" << endl;

cout << "0. Exit" << endl;*/







do {

cin >> choice;




switch (choice) {

case 1:

cin >> amount;

savingsAccount.deposit(amount);

break;

case 2:

cin >> amount;

savingsAccount.withdraw(amount);

break;

case 3:

savingsAccount.displayBalance();

break;

case 0:

cout << "Exiting the program. Goodbye!";

break;

default:

cout << "Invalid choice. Please try again.";

}

} while (choice != 0);




return 0;

} 


Problem Statement



You have been assigned the task of developing an investment returns calculation program. The program should allow users to input details about their investments and calculate the returns based on specific formulas. The program should follow these specifications:



Implement an abstract class called Investment with a pure virtual method calculateReturns(). Create concrete classes, such as Stock and Bond,  which inherit from the Investment class, to calculate returns for different types of investments.



Note: This kind of question will help in clearing Accenture recruitment.

Input format :
For each investment type:

The first line of the input contains the initial investment amount.

The next line contains the final value.

Output format :
For each investment type:

The first line of the output displays the type

The second line displays the Initial Investment.

The next line displays the Final Value.

The last line displays the calculated returns in percentage.



Refer to the sample output for formatting specifications.

Code constraints :
The initial investment amount and final value should be non-negative real numbers.

Sample test cases :
Input 1 :
1000
1500
2000
5000
Output 1 :
Type: Stock
Initial Investment: 1000.00
Final Value: 1500.00
Returns: 50.00%

Type: Bond
Initial Investment: 2000.00
Final Value: 5000.00
Returns: 150.00%
Input 2 :
250
120
350
480
Output 2 :
Type: Stock
Initial Investment: 250.00
Final Value: 120.00
Returns: -52.00%

Type: Bond
Initial Investment: 350.00
Final Value: 480.00
Returns: 37.14%



// You are using GCC

#include <iostream>

#include <iomanip>




// Abstract class representing an Investment

class Investment {

public:

virtual double calculateReturns() const = 0;




void displayInvestmentDetails() const {

displaySpecificInvestmentDetails();

std::cout << std::fixed << std::setprecision(2);

std::cout << "Returns: " << calculateReturns() << "%" << std::endl;

}




private:

// Abstract method to display specific investment details

virtual void displaySpecificInvestmentDetails() const = 0;

};




// Concrete class representing a Stock investment

class Stock : public Investment {

private:

double initialInvestment;

double finalValue;




public:

// Constructor

Stock(double initialInvestment, double finalValue) : initialInvestment(initialInvestment), finalValue(finalValue) {}




// Implementation of calculateReturns for Stock

double calculateReturns() const override {

return ((finalValue - initialInvestment) / initialInvestment) * 100.0;

}




private:

// Implementation of displaySpecificInvestmentDetails for Stock

void displaySpecificInvestmentDetails() const override {

std::cout << "Type: Stock" << std::endl;

std::cout << std::fixed << std::setprecision(2);

std::cout << "Initial Investment: " << initialInvestment << std::endl;

std::cout << "Final Value: " << finalValue << std::endl;

}

};




// Concrete class representing a Bond investment

class Bond : public Investment {

private:

double initialInvestment;

double finalValue;




public:

// Constructor

Bond(double initialInvestment, double finalValue) : initialInvestment(initialInvestment), finalValue(finalValue) {}




// Implementation of calculateReturns for Bond

double calculateReturns() const override {

return ((finalValue - initialInvestment) / initialInvestment) * 100.0;

}




private:

// Implementation of displaySpecificInvestmentDetails for Bond

void displaySpecificInvestmentDetails() const override {

std::cout << "Type: Bond" << std::endl;

std::cout << "Initial Investment: " << initialInvestment << std::endl;

std::cout << "Final Value: " << finalValue << std::endl;

}

};




int main() {

double initialInvestment, finalValue;




// Get input from the user for Stock investment details

std::cin >> initialInvestment;

std::cin >> finalValue;




// Create a Stock object

Stock stock(initialInvestment, finalValue);




// Display the investment details and returns

stock.displayInvestmentDetails();




std::cout << std::endl;




// Get input from the user for Bond investment details

std::cin >> initialInvestment;

std::cin >> finalValue;




// Create a Bond object

Bond bond(initialInvestment, finalValue);




// Display the investment details and returns

bond.displayInvestmentDetails();




return 0;

} 



Problem Statement



Susana is required to implement a program that takes three strings as input and prints them in reverse order. To achieve this, you need to use a self-referential class called StringNode, which contains a character array to store a string and a pointer to another StringNode. The StringNode class provides a method to reverse the string stored in each node. The program should create three StringNode objects, each corresponding to one input string, and link them together in reverse order. 



Finally, the program should traverse the linked structure and print the reversed strings.



Note: This kind of question will help in clearing Deloitte recruitment.

Input format :
The input consists of three strings, each on a separate line.

Output format :
The output prints the reversed strings, each on a separate line.



Refer to the sample output for formatting specifications.

Code constraints :
The length of each input string will not exceed 100 characters.

Sample test cases :
Input 1 :
Cup
of
Tea
Output 1 :
puC
fo
aeT
Input 2 :
Hey
You
Girl
Output 2 :
yeH
uoY
lriGProblem Statement



Susana is required to implement a program that takes three strings as input and prints them in reverse order. To achieve this, you need to use a self-referential class called StringNode, which contains a character array to store a string and a pointer to another StringNode. The StringNode class provides a method to reverse the string stored in each node. The program should create three StringNode objects, each corresponding to one input string, and link them together in reverse order. 



Finally, the program should traverse the linked structure and print the reversed strings.



Note: This kind of question will help in clearing Deloitte recruitment.

Input format :
The input consists of three strings, each on a separate line.

Output format :
The output prints the reversed strings, each on a separate line.



Refer to the sample output for formatting specifications.

Code constraints :
The length of each input string will not exceed 100 characters.

Sample test cases :
Input 1 :
Cup
of
Tea
Output 1 :
puC
fo
aeT
Input 2 :
Hey
You
Girl
Output 2 :
yeH
uoY
lriG



// You are using GCC

#include <iostream>

#include <cstring>




#define MAX_LEN 100




class StringNode {

public:

char str[MAX_LEN];

StringNode* next;




StringNode(const char* s) {

strncpy(str, s, MAX_LEN);

str[MAX_LEN - 1] = '\0';

next = nullptr;

}




void reverseString() {

int len = strlen(str);

for (int i = 0; i < len / 2; i++) {

char temp = str[i];

str[i] = str[len - i - 1];

str[len - i - 1] = temp;

}

}

};




int main() {

char str1[MAX_LEN], str2[MAX_LEN], str3[MAX_LEN];




std::cin.getline(str1, MAX_LEN);

std::cin.getline(str2, MAX_LEN);

std::cin.getline(str3, MAX_LEN);




StringNode n1(str1);

StringNode n2(str2);

StringNode n3(str3);




n1.reverseString();

n2.reverseString();

n3.reverseString();




n1.next = &n2;

n2.next = &n3;

n3.next = nullptr;




StringNode* current = &n1;

while (current != nullptr) {

std::cout << current->str << std::endl;

current = current->next;

}




return 0;

} 



